public class HomeWork {
    /*
     * Все задачи необходимо решать используя Stream API и выводить результат на консоль !!!
     * 1) Вывести список чисел, умноженных на 2. Список чисел задаем рандомно.
     *
     * 2) Определение количества четных чисел в потоке данных.
     * Создаем коллекцию Set<Integer> в которую добавляем рандомно 50 чисел от 0 до 100
     *
     * 3) Вывести список имен, но с первой заглавной буквой. список имен: "john", "arya", "sansa"
     *
     * 4) Создаем класс Car с полями number (номер авто) и year (год выпуска).
     * List<Car> cars = Arrays.asList(
     *             new Car("AA1111BX", 2007),
     *             new Car("AK5555IT", 2010),
     *             new Car(null, 2012),
     *             new Car("", 2015),
     *             new Car("AI3838PP", 2017));
     *
     * Необходимо вывести все не пустые номера машин, выпущенных после 2010 года
     *
     * 5) Задан список сотрудников, которые хранятся в коллекции List<p3.Person>.
     * Объект p3.Person содержит имя и фамилию(по желанию другие данные)
     *  a) написать метод, который отображает все фамилии, начинающиеся на букву "Д".
     *     Внимание! метод должен вернуть объект Optional<String>.
     *  b*)Со звездочкой. Написать метод, который будет выводить в столбик первую букву фамилии и рядом количество сотрудников,
     *  у которых фамилия начинается с этой буквы.
     *  Пример: Антонов, Петров, Сидоров, Александров...
     *  на экран выведет:
     *  A - 2 сотрудника
     *  П - 1 сотрудник
     *  С - 1 сотрудник
     *
     * 6) Пишем библиотеку.
     * Для каждой книги библиотечного фонда известны автор, название и год издания.
     * Для читателя библиотеки будем хранить ФИО и электронный адрес. Каждый читатель может взять в библиотеке одну или несколько книг.
     * Ещё нам понадобится флаг читательского согласия на уведомления по электронной почте.
     * Рассылки организуют сотрудники библиотеки: напоминают о сроке возврата книг, сообщают новости.
     * Создаем классы:
     *  - Book с полями Автор, Название, Год издания
     *  - Reader(читатель) с полями ФИО, электронный адрес, флаг согласия на рассылку, список взятых книг
     *  - EmailAddress  с полями электронный адрес, дополнительная информация
     *  - Library содержит список книг и список читателей.
     *
     *  Задачи:
     *  a) Получить список всех книг библиотеки, отсортированных по году издания.
     *  b) Требуется создать список рассылки (объекты типа EmailAddress) из адресов всех читателей библиотеки.
     *      При этом флаг согласия на рассылку учитывать не будем: библиотека закрывается, так что хотим оповестить всех.
     *  c) Снова нужно получить список рассылки. Но на этот раз включаем в него только адреса читателей, которые согласились на рассылку.
     *      Дополнительно нужно проверить, что читатель взял из библиотеки больше одной книги.
     *  d) Получить список всех книг, взятых читателями.
     *      Список не должен содержать дубликатов (книг одного автора, с одинаковым названием и годом издания).
     *  e) Проверить, взял ли кто-то из читателей библиотеки какие-нибудь книги Пушкина Александра Сергеевича.
     *
     *  Задачи со ЗВЕЗДОЧКОЙ:
     *  а) Узнать наибольшее число книг, которое сейчас на руках у читателя.
     *  b) Необходимо рассылать разные тексты двум группам:
     *      * тем, у кого взято меньше двух книг, просто расскажем о новинках библиотеки;
     *      * тем, у кого две книги и больше, напомним о том, что их нужно вернуть в срок.
     *      То есть надо написать метод, который вернёт два списка адресов (типа EmailAddress): с пометкой OK — если книг не больше двух,
     *      или TOO_MUCH — если их две и больше. Порядок групп не важен.
     *  с) Для каждой группы (OK, TOO_MUCH) получить списки читателей в каждой группе.
     *  d) Для каждой группы (OK, TOO_MUCH) получить ФИО читателей в каждой группе, перечисленные через запятую.
     *      И ещё каждый такой список ФИО нужно обернуть фигурными скобками.
     *      Пример: TOO_MUCH {Иванов Иван Иванович, Васильев Василий Васильевич}
     *              OK {Семёнов Семён Семёнович}
     *
     */
    /* ДОП. Задачи из Lesson 18
     * Писать код с использованием Stream API
     * 1) Создать класс Student, содержащий следующие характеристики – имя, группа, курс, оценки по предметам.
     * Создать коллекцию, содержащую объекты класса Student. Перебрать всех студентов, вычислить средний балл
     * каждого студента. Если средний балл >=3, студент переводится на следующий курс, иначе отчисляется.
     *
     * 2) Напишите программу, читающую из System.in текст в кодировке UTF-8,
     * подсчитывающую в нем частоту появления слов, и в конце выводящую 10 наиболее
     * часто встречающихся слов.
     *
     * Словом будем считать любую непрерывную последовательность символов, состоящую
     * только из букв и цифр. Например, в строке "Мама мыла раму 33 раза!" ровно пять слов:
     * "Мама", "мыла", "раму", "33" и "раза".
     *
     * Подсчет слов должен выполняться без учета регистра, т.е. "МАМА", "мама" и "Мама" —
     * это одно и то же слово. Выводите слова в нижнем регистре.
     *
     * Если в тексте меньше 10 уникальных слов, то выводите сколько есть.
     *
     * Если в тексте некоторые слова имеют одинаковую частоту, т.е. их нельзя
     * однозначно упорядочить только по частоте, то дополнительно упорядочите слова
     * с одинаковой частотой в лексикографическом порядке.
     *
     * Задача имеет красивое решение через стримы без циклов и условных операторов. Попробуйте придумать его.
     */

}
